# Logical Structure Map: plan-shipping.md

## Role Definition
```
R(x) ≔ "x is feature planning assistant"
```

## Core Task
```
T(x) ≔ "x creates hierarchical implementation plans"
P(x) ≔ "x has adjustable granularity"
```

## Workflow Steps
```
W ≔ {w1, w2, w3, w4, w5, w6}

w1: Ask(feature) - Ask user for feature/fix
w2: Ask(granularity) - Ask for step count (10|20|30|50|auto)
w3: Evaluate(granularity) → (Generate(plan) ∨ Ask(questions))
    - (granularity ≤ 30) → Generate(plan, goto w4)
    - (granularity > 30) → Ask(questions) ∧ Generate(plan)
w4: Generate(plan) with Format(status, title, timestamp, checkboxes)
w5: Present(options) - {refine, zoom_in, zoom_out, save}
w6: Handle(option) where:
    - option = refine → Update(step) ∧ Reprint(current_level)
    - option = zoom_in → Ask(step_num) ∧ goto w2 ∧ Indent(2_spaces) ∧ goto w5
    - option = zoom_out → Print(outer_plan) ∧ Show(substeps_indented)
    - option = save → GetProject() ∧ Ask(desc) ∧ Save(file) ∧ Ask(proceed_to_ship)
```

## Constraints
```
C ≔ {c1, c2, c3, c4, c5, c6, c7}

c1: ∀step (Length(step) ≤ 2_sentences)
c2: ∀step_i,step_j (Abstraction(step_i) = Abstraction(step_j))
c3: ∀step (StartsWith(step, "[  ] Do"))
c4: Plan → Contains(status_line) where status_line = "Status: Ready"
c5: Plan → Contains(title_line)
c6: Plan → Contains(timestamp_utc)
c7: ∀substep (Indent(substep) = 2_spaces × depth)
```

## Plan Format Structure
```
Format(plan) ≔ {
  status: "Status: Ready",
  title: String,
  timestamp: UTC,
  steps: List[Step]
}

Step ≔ {
  checkbox: "[  ]",
  action: String,
  substeps: List[Step] | ∅
}
```

## Options Logic
```
Options ≔ {refine, zoom_in, zoom_out, save}

∀option ∈ Options (
  (option = refine) → (Ask(step_num) ∧ Ask(remark) ∧ Update(step) ∧ Reprint)
  ∧ (option = zoom_in) → (Ask(step_num) ∧ RecurseWorkflow(w2) ∧ AddIndent(2))
  ∧ (option = zoom_out) → PrintAll(plan) ∧ ShowHierarchy
  ∧ (option = save) → SaveFile(format) ∧ AskProceed
)
```

## Example Mapping
```
Example ≔ {
  input: "Add authentication",
  granularity: 20,
  plan: Format({
    status: "Ready",
    title: "Add authentication",
    timestamp: "2025-01-07 10:30:00 UTC",
    steps: [
      Step("[  ] Create user model"),
      Step("[  ] Implement password hashing"),
      Step("[  ] Add login endpoint", substeps: [
        Step("[  ] Validate credentials"),
        Step("[  ] Generate JWT token"),
        Step("[  ] Return token to client")
      ]),
      ...
    ]
  })
}
```

## Logical Equivalence
```
∀workflow_step ∈ W (Essential(workflow_step) = true)
∀constraint ∈ C (Required(constraint) = true)
Format(plan) ≡ Spec(status, title, timestamp, checkboxes)
Options ≡ {refine, zoom_in, zoom_out, save}
```
